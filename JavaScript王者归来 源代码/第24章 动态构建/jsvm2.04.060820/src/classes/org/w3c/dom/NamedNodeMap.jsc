# language: jsvm2

/*
 * Copyright (c) 2000 World Wide Web Consortium,
 * (Massachusetts Institute of Technology, Institut National de
 * Recherche en Informatique et en Automatique, Keio University). All
 * Rights Reserved. This program is distributed under the W3C's Software
 * Intellectual Property License. This program is distributed in the
 * hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.
 * See W3C License http://www.w3.org/Consortium/Legal/ for more details.
 */

package org.w3c.dom;

import js.util.HashMap;
import org.w3c.dom.Node;


/**
 * Objects implementing the <code>NamedNodeMap</code> interface are used to 
 * represent collections of nodes that can be accessed by name. Note that 
 * <code>NamedNodeMap</code> does not inherit from <code>NodeList</code>; 
 * <code>NamedNodeMaps</code> are not maintained in any particular order. 
 * Objects contained in an object implementing <code>NamedNodeMap</code> may 
 * also be accessed by an ordinal index, but this is simply to allow 
 * convenient enumeration of the contents of a <code>NamedNodeMap</code>, 
 * and does not imply that the DOM specifies an order to these Nodes. 
 * <p><code>NamedNodeMap</code> objects in the DOM are live.
 * <p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>Document Object Model (DOM) Level 2 Core Specification</a>.
 */


class NamedNodeMap ()
{
	this.__map = new HashMap();
}

/**
 * Retrieves a node specified by name.
 * @param name The <code>nodeName</code> of a node to retrieve.
 * @return A <code>Node</code> (of any type) with the specified 
 *   <code>nodeName</code>, or <code>null</code> if it does not identify 
 *   any node in this map.
 */
NamedNodeMap.prototype.getNamedItem = function (name)
{
	return this.__map.get(name);
}

/**
 * Adds a node using its <code>nodeName</code> attribute. If a node with 
 * that name is already present in this map, it is replaced by the new 
 * one.
 * <br>As the <code>nodeName</code> attribute is used to derive the name 
 * which the node must be stored under, multiple nodes of certain types 
 * (those that have a "special" string value) cannot be stored as the 
 * names would clash. This is seen as preferable to allowing nodes to be 
 * aliased.
 * @param arg A node to store in this map. The node will later be 
 *   accessible using the value of its <code>nodeName</code> attribute.
 * @return If the new <code>Node</code> replaces an existing node the 
 *   replaced <code>Node</code> is returned, otherwise <code>null</code> 
 *   is returned.
 * @exception DOMException
 *   WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from a 
 *   different document than the one that created this map.
 *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
 *   <br>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an 
 *   <code>Attr</code> that is already an attribute of another 
 *   <code>Element</code> object. The DOM user must explicitly clone 
 *   <code>Attr</code> nodes to re-use them in other elements.
 *   <br>HIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node 
 *   doesn't belong in this NamedNodeMap. Examples would include trying 
 *   to insert something other than an Attr node into an Element's map 
 *   of attributes, or a non-Entity node into the DocumentType's map of 
 *   Entities.
 */
NamedNodeMap.prototype.setNamedItem = function (name, node)
{
	if (!(node instanceof Node))
	{
		throw new ArgumentException(this.getClass().getName() + 
			".setNamedItem(name, node) error: argument node is not an instance of Node.");
	}
	this.__map.put(name, node);
}


/**
 * Removes a node specified by name. When this map contains the attributes 
 * attached to an element, if the removed attribute is known to have a 
 * default value, an attribute immediately appears containing the 
 * default value as well as the corresponding namespace URI, local name, 
 * and prefix when applicable.
 * @param name The <code>nodeName</code> of the node to remove.
 * @return The node removed from this map if a node with such a name 
 *   exists.
 * @exception DOMException
 *   NOT_FOUND_ERR: Raised if there is no node named <code>name</code> in 
 *   this map.
 *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
 */
NamedNodeMap.prototype.removeNamedItem = function (name)
{
	this.__map.remove(name);
}

/**
 * Returns the <code>index</code>th item in the map. If <code>index</code> 
 * is greater than or equal to the number of nodes in this map, this 
 * returns <code>null</code>.
 * @param index Index into this map.
 * @return The node at the <code>index</code>th position in the map, or 
 *   <code>null</code> if that is not a valid index.
 */
NamedNodeMap.prototype.item = function (index)
{
	var entrys = this.__map.toArray();
	var entry = entrys[index];
	return (entry == null) ? null : entry.getValue();
}


/**
 * The number of nodes in this map. The range of valid child node indices 
 * is <code>0</code> to <code>length-1</code> inclusive.
 */
NamedNodeMap.prototype.getLength = function ()
{
	return this.__map.size();
}
